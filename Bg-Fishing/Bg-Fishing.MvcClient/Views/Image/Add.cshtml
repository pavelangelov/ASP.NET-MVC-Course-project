@model Bg_Fishing.MvcClient.Models.AddImageViewModel

@{
    ViewBag.Title = "Качване на снимка";
}

@section PageStyles{
    <link href="~/Content/page-styles/add-image.css" rel="stylesheet" />
}

<div class="container">
    <div class="col-sm-8 col-sm-offset-2">
        @using (Html.BeginForm("Add", "Image", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary("", new { @class = "text-danger" })

            <div class="form-group row col-sm-12">
                <div class="col-sm-6">
                    @{
                        @Html.LabelFor(m => m.SelectedImageGalleryId, new { @class = "label label-success", @for = "lakes-list" })
                        <select class="form-control" id="lakes-list" name="SelectedLakeId">
                            <option>-----</option>
                            @foreach(var lake in Model.Lakes)
                            {
                                <option value="@lake.Id">@lake.Name</option>
                            }
                        </select>
                    }
                </div>

                <div class="col-sm-6">
                    @Html.LabelFor(m => m.Name, new { @class = "label label-success", @for = "galleries-list" })
                    <select class="form-control" id="galleries-list"  name="SelectedImageGalleryId" disabled>
                    </select>
                </div>
                <div class="form-group col-sm-12">
                    <label for="name-input" class="label label-success">Създай нова галерия</label>
                    @Html.TextBoxFor(m => m.Name, new { @id = "name-input", @class = "form-control", @disabled = "disabled" })

                    @Html.LabelFor(m => m.ImageInfo, new { @class = "label label-success" })
                    @Html.TextAreaFor(m => m.ImageInfo, new { @class = "form-control", @rows = 6 })
                </div>
                <div class="form-group col-sm-12">
                    <label for="image-upload-container" class="label label-success">Избери файл</label>
                    <div id="image-upload-container" class="fileinput fileinput-new input-group col-sm-8" data-provides="fileinput">
                        <div class="form-control" data-trigger="fileinput">
                            <i class="glyphicon glyphicon-file fileinput-exists"></i>
                            <span class="fileinput-filename"></span>
                        </div>
                        <span class="input-group-addon btn btn-default btn-file">
                            <span class="fileinput-new">
                                <span class="glyphicon glyphicon-level-up"></span>
                            </span>
                            <span class="fileinput-exists">Change</span>
                            <input type="file" name="file">
                        </span>
                        <a href="#" class="input-group-addon btn btn-default fileinput-exists" data-dismiss="fileinput">Remove</a>
                    </div>
                </div>
                <div class="img-container col-sm-12">
                    <div class="error-messages"></div>
                    <img class="img-preview" />
                </div>
            </div>
            <input type="submit" value="Добави" class="btn btn-success" />
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    //=====================================================================================
    //                   Load available galleries when lake is selected
    //=====================================================================================
    $('select#lakes-list').change((ev) => {
        let value = $('select#lakes-list option:selected').val(),
            text = $('select#lakes-list option:selected').text(),
            defaultValue = $('select#lakes-list option:first').val();

        if (value && value !== defaultValue) {
            // TODO: Get galleries from server and load them in select#galleries-list !!!
            $.get(`/Image/GetGalleries?lakeName=${text}`, (data) => {
                let result = JSON.parse(data),
                    options = '<option>-----</option>';

                for (let i = 0, len = result.length; i < len; i += 1) {
                    options += `<option value="${result[i]['Id']}">${result[i]['Name']}</option>`;
                };


                $('#galleries-list').removeAttr('disabled').html(options);
                $('#name-input').removeAttr('disabled');
            })
        } else {
            $('#galleries-list').html('').attr('disabled', '');
            $('#name-input').val('').attr('disabled', '');
        }
    })

    //=====================================================================================
    //                                 Set gallery name
    //=====================================================================================
    $('select#galleries-list').change((ev) => {
        let value = $('select#galleries-list option:selected').val(),
            text = $('select#galleries-list option:selected').text(),
            defaultValue = $('select#galleries-list option:first').val();

        if (text !== undefined && text.length && text !== defaultValue) {
            $('input#name-input').val(text);
        } else {
            $('input#name-input').val('');
        }
        
    })

    //=====================================================================================
    //                                  Validate uploaded file
    //=====================================================================================
    $('input[type=file]').on('change', (ev) => {
        readURL(ev.target);
    })

    const IMAGE_MAX_SIZE = 3 * 1024 * 1000,
        INVALID_FILE_TYPE_ERROR_MESSAGE = 'Избраният файл не е валидно изображение!',
        INVALID_SIZE_ERROR_MESSAGE = 'Избраният файл надхвърля разрешените 3MB!'

    function readURL(input) {

        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                $('img.img-preview').attr('src', e.target.result);
            }

            let errorContainer = $('div.error-messages');
            errorContainer.html('');

            if (input.files[0].type.indexOf('image/') < 0) {
                let err = $('<span />').html(INVALID_FILE_TYPE_ERROR_MESSAGE)
                    .addClass('text-danger')
                    .appendTo(errorContainer);
                return;
            }

            if (input.files[0].size > 3 * 1024 * 1000) {
                let err = $('<span />').html(INVALID_SIZE_ERROR_MESSAGE)
                    .addClass('text-danger')
                    .appendTo(errorContainer);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

    $("#imgInp").change(function () {
        readURL(this);
    });

    //=====================================================================================
    //                                   Plugin for file-upload
    //=====================================================================================
    (function ($) {
        "use strict";

        var isIE = window.navigator.appName == 'Microsoft Internet Explorer'

        // FILEUPLOAD PUBLIC CLASS DEFINITION
        // =================================

        var Fileinput = function (element, options) {
            this.$element = $(element)

            this.$input = this.$element.find(':file')
            if (this.$input.length === 0) return

            this.name = this.$input.attr('name') || options.name

            this.$hidden = this.$element.find('input[type=hidden][name="' + this.name + '"]')
            if (this.$hidden.length === 0) {
                this.$hidden = $('<input type="hidden">').insertBefore(this.$input)
            }

            this.$preview = this.$element.find('.fileinput-preview')
            var height = this.$preview.css('height')
            if (this.$preview.css('display') !== 'inline' && height !== '0px' && height !== 'none') {
                this.$preview.css('line-height', height)
            }

            this.original = {
                exists: this.$element.hasClass('fileinput-exists'),
                preview: this.$preview.html(),
                hiddenVal: this.$hidden.val()
            }

            this.listen()
        }

        Fileinput.prototype.listen = function () {
            this.$input.on('change.bs.fileinput', $.proxy(this.change, this))
            $(this.$input[0].form).on('reset.bs.fileinput', $.proxy(this.reset, this))

            this.$element.find('[data-trigger="fileinput"]').on('click.bs.fileinput', $.proxy(this.trigger, this))
            this.$element.find('[data-dismiss="fileinput"]').on('click.bs.fileinput', $.proxy(this.clear, this))
        },

            Fileinput.prototype.change = function (e) {
                var files = e.target.files === undefined ? (e.target && e.target.value ? [{
                    name: e.target.value.replace(/^.+\\/, '')
                }] : []) : e.target.files

                e.stopPropagation()

                if (files.length === 0) {
                    this.clear()
                    return
                }

                this.$hidden.val('')
                this.$hidden.attr('name', '')
                this.$input.attr('name', this.name)

                var file = files[0]

                if (this.$preview.length > 0 && (typeof file.type !== "undefined" ? file.type.match(/^image\/(gif|png|jpeg)$/) : file.name.match(/\.(gif|png|jpe?g)$/i)) && typeof FileReader !== "undefined") {
                    var reader = new FileReader()
                    var preview = this.$preview
                    var element = this.$element

                    reader.onload = function (re) {
                        var $img = $('<img>')
                        $img[0].src = re.target.result
                        files[0].result = re.target.result

                        element.find('.fileinput-filename').text(file.name)

                        // if parent has max-height, using `(max-)height: 100%` on child doesn't take padding and border into account
                        if (preview.css('max-height') != 'none') $img.css('max-height', parseInt(preview.css('max-height'), 10) - parseInt(preview.css('padding-top'), 10) - parseInt(preview.css('padding-bottom'), 10) - parseInt(preview.css('border-top'), 10) - parseInt(preview.css('border-bottom'), 10))

                        preview.html($img)
                        element.addClass('fileinput-exists').removeClass('fileinput-new')

                        element.trigger('change.bs.fileinput', files)
                    }

                    reader.readAsDataURL(file)
                } else {
                    this.$element.find('.fileinput-filename').text(file.name)
                    this.$preview.text(file.name)

                    this.$element.addClass('fileinput-exists').removeClass('fileinput-new')

                    this.$element.trigger('change.bs.fileinput')
                }
            },

            Fileinput.prototype.clear = function (e) {
                if (e) e.preventDefault()

                this.$hidden.val('')
                this.$hidden.attr('name', this.name)
                this.$input.attr('name', '')

                //ie8+ doesn't support changing the value of input with type=file so clone instead
                if (isIE) {
                    var inputClone = this.$input.clone(true);
                    this.$input.after(inputClone);
                    this.$input.remove();
                    this.$input = inputClone;
                } else {
                    this.$input.val('')
                }

                this.$preview.html('')
                this.$element.find('.fileinput-filename').text('')
                this.$element.addClass('fileinput-new').removeClass('fileinput-exists')

                if (e !== undefined) {
                    this.$input.trigger('change')
                    this.$element.trigger('clear.bs.fileinput')
                }
            },

            Fileinput.prototype.reset = function () {
                this.clear()

                this.$hidden.val(this.original.hiddenVal)
                this.$preview.html(this.original.preview)
                this.$element.find('.fileinput-filename').text('')

                if (this.original.exists) this.$element.addClass('fileinput-exists').removeClass('fileinput-new')
                else this.$element.addClass('fileinput-new').removeClass('fileinput-exists')

                this.$element.trigger('reset.bs.fileinput')
            },

            Fileinput.prototype.trigger = function (e) {
                this.$input.trigger('click')
                e.preventDefault()
            }


        // FILEUPLOAD PLUGIN DEFINITION
        // ===========================

        var old = $.fn.fileinput

        $.fn.fileinput = function (options) {
            return this.each(function () {
                var $this = $(this),
                    data = $this.data('bs.fileinput')
                if (!data) $this.data('bs.fileinput', (data = new Fileinput(this, options)))
                if (typeof options == 'string') data[options]()
            })
        }

        $.fn.fileinput.Constructor = Fileinput


        // FILEINPUT NO CONFLICT
        // ====================

        $.fn.fileinput.noConflict = function () {
            $.fn.fileinput = old
            return this
        }


        // FILEUPLOAD DATA-API
        // ==================

        $(document).on('click.fileinput.data-api', '[data-provides="fileinput"]', function (e) {
            var $this = $(this)
            if ($this.data('bs.fileinput')) return
            $this.fileinput($this.data())

            var $target = $(e.target).closest('[data-dismiss="fileinput"],[data-trigger="fileinput"]');
            if ($target.length > 0) {
                e.preventDefault()
                $target.trigger('click.bs.fileinput')
            }
        })

    }(window.jQuery));
</script>